/**
 * GPL Example
 * Runtime variability and monolithic implementation
 * @author Roberto E. Lopez-Herrejon
 * ETS-LOGTI
 */
package target;

import java.io.*;

/**
 * Main class for GPL example
 * @author Roberto E. Lopez-Herrejon
 * @feature Prog 
 */
public class Driver {
	
	// ***********************************************************************
	
	// Note: All the static boolean variables are no longer necessary because the configuration has been checked before
	// the generation of the class
	
	
	/** Definition of arguments
	 * [0] Name of Benchmark file
	 * [1] Name of starting vertex, ex.  v0 
	 * [2] ... names of features that are selected for execution
	 */
    public static void main( String[] args ) {
    	
    	// Step 0: Verify consistency of product configuration
    	// Note: Not necessary to verify beacuse at the generation time, the feature configuration has been already checked

      	
    	
    	// Step 1: create graph object
        Graph g = new  Graph();
        
        // Step 2: sets up the benchmark file to read
        g.openBenchmark( args[0] );
         
        // Step 3: reads number of vertices, number of edges and weights
        int num_vertices = 0;
        int num_edges = 0;
        try {
            num_vertices = g.readNumber();
            num_edges = g.readNumber();
            // ignores the additional description files
            g.readNumber();   // undirected, directed
            g.readNumber();   // self loops
            g.readNumber();   // unique
        }catch( IOException e ) {
        	System.out.println("Error while reading benchmark file configuration values");
        	System.exit(0);
        }
        
        // @DEBUG
        System.out.println("Benchmark file read");
        
        // Step 4: reserves space for vertices, edges and weights
        Vertex V[] = new  Vertex[num_vertices];
        int startVertices[] = new int[num_edges];
        int endVertices[] = new int[num_edges];
        
        #if($WEIGHTED)
        // feature WEIGHTED
        int weights[] = new int[num_edges];
        #end
        
        // Step 5: creates the vertices objects 
        int i=0;
        for ( i=0; i<num_vertices; i++ ) {
            V[i] = new Vertex().assignName( "v"+i );
            g.addVertex( V[i] );
        }
                  
        // Step 6: reads the edges
        try {
            for( i=0; i<num_edges; i++ ) {
                startVertices[i] = g.readNumber();
                endVertices[i] = g.readNumber();
            }
        }catch( IOException e ) {
        	System.out.println("Error while reading the edges");
        	System.exit(0);
        }
        
        #if($WEIGHTED)
        // feature WEIGHTED
        // Step 7: reads the weights
        try {
        		for( i=0; i<num_edges; i++ ) weights[i] = g.readNumber();
        	} catch ( IOException e ) {
               System.out.println("Error while reading the weigths");
        	   System.exit(0);
        	}
        // --- feature WEIGHTED
        #end
        
        // Stops the benchmark reading
        g.stopBenchmark();
         
        // Step 8: Adds the edges
        for ( i=0; i<num_edges; i++ ) {

            #if($WEIGHTED)
            // feature WEIGHTED        	
        	g.addAnEdge( V[startVertices[i]], V[endVertices[i]],weights[i] );
        	#else
        	// feature !WEIGHTED
        		g.addAnEdge( V[startVertices[i]], V[endVertices[i]]);
        	#end
        	
        } // for all the edges
     
        // Executes the selected features
        Graph.startProfile();
        g.run( g.findsVertex( args[1] ) );
           
        Graph.stopProfile();
        g.display();
        Graph.resumeProfile();
            
        // End profiling
        Graph.endProfile();

    } // main method


 }   // of class Main